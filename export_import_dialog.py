# -*- coding: utf-8 -*-
"""
/***************************************************************************
 export_importDialog
                                 A QGIS plugin
 Exporter via polygone - Importer par couche
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Romain Lagrange - PCE Services
        email                : romain.lagrange@pceservices.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import processing
import xml.etree.ElementTree as ET
import socket
from cryptography.fernet import Fernet
from PyQt5.QtWidgets import *
from qgis.core import QgsProject, QgsLayerTreeLayer, QgsLayerTreeGroup
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from PyQt5.QtCore import *
from qgis.utils import iface
from qgis.core import *
from osgeo import ogr
import pyperclip
from qgis.core import QgsMapLayerProxyModel
from qgis.gui import *
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget


from office365.runtime.auth.authentication_context import AuthenticationContext
from office365.sharepoint.client_context import ClientContext

token = b'gAAAAABlMNLxrHfiOW_l80_PxXGbmsKRj_O04OtYa1TLztVTvo7_b4xaeZ_aP3Hoz-qn6y8BwkITfNmZbtxiMj8wB794HeH5lA=='

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'export_import_dialog_base.ui'))

ctx = None


class export_importDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(export_importDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        dernier_ajout_url = None
        global ctx

        # Activer ou non l'utilisation des polygones
        def utilisationPolygone():
            if self.checkBoxPolygone.isChecked():
                self.comboBoxPolygone.setEnabled(True)
            else:
                self.comboBoxPolygone.setEnabled(False)

        def changementCouche():
            self.comboBoxCouche.clear()
            couches = []
            for layer in QgsProject.instance().mapLayers().values():
                if layer.type() == QgsMapLayer.VectorLayer:
                    couches.append(layer.name())
            self.comboBoxCouche.addItems(couches)

        def changementsite():
            global ctx
            ctx = None
            self.label_url_sharepoint.setText(
                'https://pceservicesfr.sharepoint.com/sites/'+self.comboBox_site_sharepoint.currentText()+"/Documents partages/")
            dernier_ajout_url = self.comboBox_site_sharepoint.currentText()
            ctx = connexion_a_sharepoint()
            lister_dossier_sharepoint(ctx)

        def connexion_a_sharepoint():
            result = None
            try:
                md = QgsProviderRegistry.instance().providerMetadata('postgres')
                uri = QgsDataSourceUri()
                uri.setConnection("185.65.81.75", "5432", "pce_exe",
                                  None, None, authConfigId="pce2022")
                uri.setDataSource("public", "credential_py",
                                  "key", aKeyColumn="1")
                conn = md.createConnection(uri.uri(), {})
                result = conn.executeSql(
                    'SELECT key FROM "public"."credential_py" WHERE id = 1')
            except Exception as err:
                QMessageBox.information(
                    None, "Erreur", '%s' % (err))
                return

            global ctx
            baseurl = 'https://pceservicesfr.sharepoint.com/'
            basesite = 'sites/'+self.comboBox_site_sharepoint.currentText()
            siteurl = baseurl + basesite
            ctx_auth = AuthenticationContext(
                siteurl)  # should also be the siteurl
            ctx_auth.acquire_token_for_user(
                'qgis.sharepoint@pceservices.fr', Fernet(
                    result[0][0]).decrypt(token).decode('utf-8')
            )
            # make sure you auth to the siteurl.
            ctx = ClientContext(siteurl, ctx_auth)
            return (ctx)

        global lister_dossier_sharepoint

        def lister_dossier_sharepoint(ctx):
            self.comboBox_dossier_sharepoint.clear()
            try:
                folder = self.label_url_sharepoint.toPlainText().replace(
                    'https://pceservicesfr.sharepoint.com', '')
                folder = ctx.web.get_folder_by_server_relative_url(folder)
                fold_names = []
                sub_folders = folder.folders
                ctx.load(sub_folders)
                ctx.execute_query()
                for s_folder in sub_folders:
                    fold_names.append(s_folder.properties["Name"])
                self.comboBox_dossier_sharepoint.addItems(fold_names)
            except Exception as e:
                pass

        def ajouter_dossier_url():
            self.label_url_sharepoint.setText(self.label_url_sharepoint.toPlainText(
            )+self.comboBox_dossier_sharepoint.currentText()+'/')
            ctx = connexion_a_sharepoint()
            lister_dossier_sharepoint(ctx)

        def supprimer_dossier_url():
            self.label_url_sharepoint.setText(
                'https://pceservicesfr.sharepoint.com/sites/'+self.comboBox_site_sharepoint.currentText()+"/Documents partages/")
            dernier_ajout_url = self.comboBox_site_sharepoint.currentText()
            ctx = connexion_a_sharepoint()
            lister_dossier_sharepoint(ctx)

        def copier_url():
            pyperclip.copy(self.label_url_sharepoint.toPlainText())

        def toutselectionner():
            if self.checkBoxToutSelectionnerCouche.isChecked():
                self.comboBoxCouche.selectAllOptions()
                self.checkBoxToutSelectionnerCouche.setText(
                    'Tout désélectionner')
            else:
                self.comboBoxCouche.deselectAllOptions()
                self.checkBoxToutSelectionnerCouche.setText(
                    'Tout sélectionner')

        # Initialisation et connexion des fonctions récurentes
        self.comboBoxZone.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.comboBoxPolygone.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.checkBoxPolygone.stateChanged.connect(utilisationPolygone)
        self.checkBoxToutSelectionnerCouche.stateChanged.connect(
            toutselectionner)
        QgsProject.instance().layersAdded.connect(changementCouche)
        QgsProject.instance().layersRemoved.connect(changementCouche)
        changementCouche()
        changementsite()
        self.comboBox_site_sharepoint.currentTextChanged.connect(
            changementsite)
        global ctx
        ctx = connexion_a_sharepoint()
        filelist_shrpt = lister_dossier_sharepoint(ctx)
        self.button_ajouter_url.clicked.connect(ajouter_dossier_url)
        self.button_supprimer_url.clicked.connect(supprimer_dossier_url)
        self.button_copier_url.clicked.connect(copier_url)

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidget = QtWidgets.QWidget()
        self.scrollAreaWidget.setGeometry(QRect(0, 0, 780, 539))
        self.scrollAreaWidgetLayout = QtWidgets.QVBoxLayout(
            self.scrollAreaWidget)
        self.scrollAreaWidgetLayout.addItem(QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding))
        self.scrollArea.setWidget(self.scrollAreaWidget)

        self.buttonWidget = QtWidgets.QWidget(self.centralwidget)
        self.buttonAddGroupBox = QtWidgets.QPushButton(
            'Ajouter', self.buttonWidget)
        self.buttonDeleteLaterGroupBox = QtWidgets.QPushButton(
            'Supprimer', self.buttonWidget)
        self.buttonLayout = QtWidgets.QGridLayout(self.buttonWidget)
        self.buttonLayout.addWidget(self.buttonAddGroupBox,          0, 0)
        self.buttonLayout.addWidget(self.buttonDeleteLaterGroupBox,  0, 1)

        self.centralwidgetLayout.addWidget(self.buttonWidget)
        self.centralwidgetLayout.addWidget(self.scrollArea)

        self.buttonAddGroupBox.clicked.connect(self.addGroupBox)
        self.buttonDeleteLaterGroupBox.clicked.connect(
            self.deleteLaterGroupBox)

        if not 'pce' in str(socket.gethostbyaddr(socket.gethostname())[0]):
            QMessageBox.critical(
                None, "Accès refusé", 'Merci de contacter : romain.lagrange@pceservices.fr\nPCE Services : Tous droits réservés.')
            self.setEnabled(False)

    def addGroupBox(self):
        count = self.scrollAreaWidgetLayout.count() - 1
        groupBox = QtWidgets.QGroupBox(
            'Importation ' + str(count+1), self.scrollAreaWidget)
        groupBox.setObjectName('groupbox'+str(count))
        self.scrollAreaWidgetLayout.insertWidget(count, groupBox)

        labelcouchesource = QtWidgets.QLabel('Couche source', groupBox)
        labelcouchedestination = QtWidgets.QLabel(
            'Couche destination', groupBox)
        labelnomcouchesource = QtWidgets.QLabel('Nommage entités', groupBox)
        labelchamps = QtWidgets.QLabel('Champs à importer', groupBox)
        comboboxcouchesource = QgsMapLayerComboBox(groupBox)
        comboboxcouchedestination = QgsMapLayerComboBox(groupBox)
        comboboxnomcouchesource = QgsFieldComboBox(groupBox)
        comboboxchamps = QgsCheckableComboBox(groupBox)
        checkboxselection = QtWidgets.QCheckBox(groupBox)
        checkboxgeometrie = QtWidgets.QCheckBox(groupBox)
        checkboxnouvelleentite = QtWidgets.QCheckBox(groupBox)
        checkboxselection.setText('Tout selectionner')
        checkboxgeometrie.setText('Importer les modifications de géométries')
        checkboxnouvelleentite.setText('Importer les nouvelles entités')

        def selectionChamp():
            if checkboxselection.isChecked():
                comboboxchamps.selectAllOptions()
                checkboxselection.setText('Tout désélectionner')
            else:
                comboboxchamps.deselectAllOptions()
                checkboxselection.setText('Tout sélectionner')

        def changelayersource():
            comboboxchamps.clear()
            layer = comboboxcouchesource.currentLayer()
            if layer is not None and layer.type() == QgsMapLayer.VectorLayer:
                field_names = [field.name() for field in layer.fields()]
                field_names.remove('id')
                comboboxchamps.addItems(field_names)
                comboboxnomcouchesource.setLayer(layer)

        gridLayout = QtWidgets.QFormLayout(groupBox)
        gridLayout.addRow(labelcouchesource, comboboxcouchesource)
        gridLayout.addRow(labelcouchedestination, comboboxcouchedestination)
        gridLayout.addRow(labelnomcouchesource, comboboxnomcouchesource)
        gridLayout.addRow(labelchamps, comboboxchamps)
        gridLayout.addRow(checkboxselection)
        gridLayout.addRow(checkboxgeometrie)
        gridLayout.addRow(checkboxnouvelleentite)
        comboboxcouchesource.layerChanged.connect(changelayersource)
        comboboxcouchesource.setObjectName("coucheSource" + str(count))
        comboboxcouchedestination.setObjectName(
            "coucheDestination" + str(count))
        comboboxnomcouchesource.setObjectName("nomcouchesource" + str(count))
        comboboxchamps.setObjectName("champsimport" + str(count))
        checkboxselection.setObjectName("checkboxselection" + str(count))
        checkboxgeometrie.setObjectName("checkboxgeometrie" + str(count))
        checkboxnouvelleentite.setObjectName(
            "checkboxnouvelleentite" + str(count))
        checkboxselection.stateChanged.connect(selectionChamp)
        changelayersource()

    def deleteLaterGroupBox(self):
        count = self.scrollAreaWidgetLayout.count()
        if count == 1:
            return
        item = self.scrollAreaWidgetLayout.itemAt(count - 2)
        widget = item.widget()
        widget.deleteLater()

    # Importation des données

    def importDonnee(self):
        if QMessageBox.Ok == QMessageBox.question(self, "Importer des données", "Vous vous apprêtez à écraser les données de la couche de destination par les données de la couche source pour les champs selectionnés. Voulez-vous continuer ?", QMessageBox.Ok | QMessageBox.Cancel):
            global ctx
            # Définition des couches
            count = self.scrollAreaWidgetLayout.count() - 2
            while count >= 0:
                couchesource = self.findChild(
                    QgsMapLayerComboBox, 'coucheSource'+str(count)).currentLayer()
                couchedestination = self.findChild(
                    QgsMapLayerComboBox, 'coucheDestination'+str(count)).currentLayer()
                champs_a_modifier = self.findChild(
                    QgsCheckableComboBox, 'champsimport'+str(count)).checkedItems()

                couchepolygone = self.comboBoxPolygone.currentLayer()
                couchedestination.startEditing()

                # Récupération des champs cochés dans la liste déroulante

                champs_couche_destination = [
                    field.name() for field in couchedestination.fields()]

                # Initialisation des variables
                modification_attribut = 0
                modification_geom = 0
                liste_entite_a_creer = []

                # Vérification si utilisation des polygones
                if self.checkBoxPolygone.isChecked():
                    # Si oui : Sélection par localisation
                    parameters = {'INPUT': couchesource,
                                  'INTERSECT': couchepolygone,
                                  'METHOD': 0,
                                  'PREDICATE': [6]}
                    processing.run('qgis:selectbylocation', parameters)
                else:
                    # Si non : Tout sélectionner
                    couchesource.selectAll()

                if self.findChild(QCheckBox, 'checkboxgeometrie'+str(count)).isChecked():
                    champs_a_modifier.append('geom')
                if self.findChild(QCheckBox, 'checkboxnouvelleentite'+str(count)).isChecked():
                    champs_a_modifier.append('nouvelleentite')
                # Pour chaque champ
                for champ in champs_a_modifier:
                    # Si le champ existe dans la couche de destination
                    if str(champ) in champs_couche_destination or str(champ) == 'geom' or str(champ) == 'nouvelleentite':
                        destinationfield = couchedestination.fields().indexOf(champ)
                        for entitesource in couchesource.getSelectedFeatures():
                            comparaison_source_destination = 0
                            for entitedestination in couchedestination.getFeatures():
                                # Si l'id est retrouvé dans la couche de desination
                                if entitesource['id'] == entitedestination['id']:
                                    comparaison_source_destination = 1
                                    # mise à jour de la géométrie si le champ est geom
                                    if str(champ) == 'geom':
                                        if not entitesource.geometry().equals(entitedestination.geometry()):
                                            entitedestination.setGeometry(
                                                entitesource.geometry())
                                            couchedestination.updateFeature(
                                                entitedestination)
                                            modification_geom += 1
                                            break
                                    elif str(champ) != 'nouvelleentite':
                                        # Mettre à jour la valeur si la source et la destination sont différentes
                                        if entitesource[champ] != entitedestination[champ]:
                                            couchedestination.changeAttributeValue(
                                                entitedestination.id(), destinationfield, entitesource[champ])
                                            modification_attribut += 1
                                            field_index_source = couchesource.fields().indexFromName(champ)
                                            field_index_destination = couchedestination.fields().indexFromName(champ)
                                            if field_index_source >= 0 and field_index_source < len(couchesource.fields()):
                                                field = couchesource.fields().at(field_index_source)
                                                if field.editorWidgetSetup():
                                                    custom_widget_type = field.editorWidgetSetup().type()
                                                    if custom_widget_type == 'ExternalResource':
                                                        if not entitesource[champ] == NULL:
                                                            localpath = QgsProject.instance().readPath("./") + \
                                                                '/' + \
                                                                entitesource[champ]
                                                            nom_entite = entitesource[self.findChild(
                                                                QgsFieldComboBox, 'nomcouchesource'+str(count)).currentField()].replace('/', '-')
                                                            url_dossier = self.label_url_sharepoint.toPlainText()
                                                            url_dossier = url_dossier.split(
                                                                'ALTI/', 1)
                                                            url_dossier = url_dossier[1] + \
                                                                nom_entite
                                                            create_folder = ctx.web.folders.add(
                                                                url_dossier).execute_query()
                                                            remotepath = url_dossier+"/"+nom_entite+'_'+champ+".jpg"
                                                            try:
                                                                with open(localpath, 'rb') as content_file:
                                                                    file_content = content_file.read()
                                                                    dir, name = os.path.split(
                                                                        remotepath)
                                                                    file = ctx.web.get_folder_by_server_relative_url(
                                                                        dir).upload_file(name, file_content).execute_query()
                                                                    print(
                                                                        self.comboBox_site_sharepoint.currentText())
                                                                    couchedestination.changeAttributeValue(entitedestination.id(
                                                                    ), field_index_destination, 'https://pceservicesfr.sharepoint.com/sites/'+self.comboBox_site_sharepoint.currentText()+'/'+remotepath)
                                                            except:
                                                                print(
                                                                    localpath+' introuvable')

                                            break
                            # Si l'id n'est pas retrouvé dans la couche de destination, ajouter l'entité la la liste de création
                            if comparaison_source_destination == 0 and self.findChild(QCheckBox, 'checkboxnouvelleentite'+str(count)).isChecked():
                                liste_entite_a_creer.append(entitesource.id())
                    else:
                        QMessageBox.critical(None, "Champ non importé", 'Le champ '+str(
                            champ)+' n\'existe pas dans la couche de destination.')
                # Créer les entités manquantes
                if self.findChild(QCheckBox, 'checkboxnouvelleentite'+str(count)).isChecked():
                    liste_entite_a_creer = list(
                        dict.fromkeys(liste_entite_a_creer))
                    couchesource.removeSelection()
                    if len(liste_entite_a_creer) > 0:
                        couchesource.selectByIds(liste_entite_a_creer)
                        iface.copySelectionToClipboard(couchesource)
                        iface.pasteFromClipboard(couchedestination)
                        for champ in champs_a_modifier:
                            # Si le champ existe dans la couche de destination
                            if str(champ) in champs_couche_destination or str(champ) == 'geom' or str(champ) == 'nouvelleentite':
                                destinationfield = couchedestination.fields().indexOf(champ)
                                for entitesource in couchesource.getSelectedFeatures():
                                    comparaison_source_destination = 0
                                    for entitedestination in couchedestination.getFeatures():
                                        # Si l'id est retrouvé dans la couche de desination
                                        if entitesource.geometry() == entitedestination.geometry():
                                            comparaison_source_destination = 1
                                            # mise à jour de la géométrie si le champ est geom
                                            if str(champ) != 'nouvelleentite':
                                                # Mettre à jour la valeur si la source et la destination sont différentes
                                                if entitesource[champ] != entitedestination[champ]:
                                                    field_index_source = couchesource.fields().indexFromName(champ)
                                                    field_index_destination = couchedestination.fields().indexFromName(champ)
                                                    if field_index_source >= 0 and field_index_source < len(couchesource.fields()):
                                                        field = couchesource.fields().at(field_index_source)
                                                        if field.editorWidgetSetup():
                                                            custom_widget_type = field.editorWidgetSetup().type()
                                                            if custom_widget_type == 'ExternalResource':
                                                                if not entitesource[champ] == NULL:
                                                                    localpath = QgsProject.instance().readPath("./") + \
                                                                        '/' + \
                                                                        entitesource[champ]
                                                                    nom_entite = entitesource[self.findChild(
                                                                        QgsFieldComboBox, 'nomcouchesource'+str(count)).currentField()].replace('/', '-')
                                                                    url_dossier = self.label_url_sharepoint.toPlainText()
                                                                    url_dossier = url_dossier.split(
                                                                        'ALTI/', 1)
                                                                    url_dossier = url_dossier[1] + \
                                                                        nom_entite
                                                                    create_folder = ctx.web.folders.add(
                                                                        url_dossier).execute_query()
                                                                    remotepath = url_dossier+"/"+nom_entite+'_'+champ+".jpg"
                                                                    try:
                                                                        with open(localpath, 'rb') as content_file:
                                                                            file_content = content_file.read()
                                                                            dir, name = os.path.split(
                                                                                remotepath)
                                                                            file = ctx.web.get_folder_by_server_relative_url(
                                                                                dir).upload_file(name, file_content).execute_query()
                                                                            print(
                                                                                self.comboBox_site_sharepoint.currentText())
                                                                            couchedestination.changeAttributeValue(entitedestination.id(
                                                                            ), field_index_destination, 'https://pceservicesfr.sharepoint.com/sites/'+self.comboBox_site_sharepoint.currentText()+'/'+remotepath)
                                                                    except:
                                                                        print(
                                                                            localpath+' introuvable')

                couchesource.removeSelection()
                couchedestination.removeSelection()
                QMessageBox.information(None, "Importation terminée : " + self.findChild(QgsMapLayerComboBox, 'coucheSource'+str(count)).currentLayer().name(), str(modification_attribut)+' valeurs modifiées.\n'+str(
                    modification_geom)+' géométries modifiées.\n'+str(len(liste_entite_a_creer))+' entités ajoutées.\nPensez à enregistrer les modification après vérification par échantillonage.')
                count -= 1

    def chercherDossier(self):
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(
            self, 'Select Folder')
        self.lineEditFolder.setText(folderpath)

    def exporterProjet(self):
        couche_a_importer = []
        nom_couche_a_importer = self.comboBoxCouche.checkedItems()
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() in nom_couche_a_importer:
                couche_a_importer.append(layer)

        path = self.lineEditFolder.text()+'/'+self.lineEditNomProjet.text()
        isExist = os.path.exists(path)
        if not isExist:
            os.makedirs(path)
        url_package = path+'/'+self.lineEditNomProjet.text()+'.gpkg'
        url_projet = path+'/'+self.lineEditNomProjet.text()+'.qgs'
        couchePolygone = self.comboBoxZone.currentLayer()
        basepath = os.path.dirname(os.path.realpath(__file__))
        file_path = os.path.join(basepath, 'structure_projet.xml')

        def structure_projet_vers_xml(project, file_path):
            root = project.layerTreeRoot()
            group_data = []

            def get_group_data(group):
                data = {"name": group.name(), "layers": []}
                for child_node in group.children():
                    if isinstance(child_node, QgsLayerTreeLayer):
                        layer = child_node.layer()
                        if layer:
                            data["layers"].append(
                                str(layer.name())+' (Hors ligne)')
                    elif isinstance(child_node, QgsLayerTreeGroup):
                        data["layers"].extend(
                            get_group_data(child_node)["layers"])
                return data

            for group in root.children():
                if isinstance(group, QgsLayerTreeGroup):
                    group_data.append(get_group_data(group))

            with open(file_path, 'w') as file:
                file.write('<?xml version="1.0" encoding="UTF-8"?>\n')
                file.write('<layer_groups>\n')
                for group in group_data:
                    file.write(f'  <group name="{group["name"]}">\n')
                    for layer_name in group["layers"]:
                        file.write(f'    <layer name="{layer_name}"/>\n')
                    file.write('  </group>\n')
                file.write('</layer_groups>')

        project = QgsProject.instance()
        structure_projet_vers_xml(project, file_path)

        # Sélectionner les entités à l'intérieur du polygone
        for layer in couche_a_importer:
            parameters = {'INPUT': layer,
                          'INTERSECT': couchePolygone,
                          'METHOD': 0,
                          'PREDICATE': [0]}
            processing.run('native:selectbylocation', parameters)
            saveas = path+'/'+str(layer.name())+'.qml'
            layer.saveNamedStyle(saveas)

        # Créer un géopackage

        parameters = {'EXPORT_RELATED_LAYERS': False,
                      'LAYERS': couche_a_importer,
                      'OUTPUT': url_package,
                      'OVERWRITE': True,
                      'SAVE_METADATA': True,
                      'SAVE_STYLES': False,
                      'SELECTED_FEATURES_ONLY': True}
        result = processing.run('native:package', parameters)['OUTPUT']

        project = QgsProject.instance()

        # Créer un nouveau projet et importer les couches du geopackage
        project.clear()
        project.setCrs(QgsCoordinateReferenceSystem('EPSG:2154'))
        project.write(url_projet)
        project.read(url_projet)

        gpkg_layers = [l.GetName() for l in ogr.Open(url_package)]
        for layer in gpkg_layers:
            if layer != 'layer_styles':
                iface.addVectorLayer(
                    url_package + "|layername=" + layer, layer+' (Hors ligne)', 'ogr')

        with open(file_path, "r") as file:
            xml_content = file.read()

        # Charger le contenu XML dans une structure d'élément
        root = ET.fromstring(xml_content)

        # Inverser l'ordre des groupes
        root[:] = root[::-1]

        # Inverser l'ordre des layers dans chaque groupe
        for group in root:
            group[:] = group[::-1]

        # Transformer la structure d'élément en une chaîne de caractères XML
        inverted_xml = ET.tostring(root, encoding="unicode")

        with open(file_path, "w") as file:
            file.write(inverted_xml)

        root = QgsProject.instance().layerTreeRoot()
        tms = 'type=xyz&url=https://tile.openstreetmap.org/{z}/{x}/{y}.png&zmax=19&zmin=0'
        layer = QgsRasterLayer(tms, 'OSM Standard', 'wms')
        QgsProject.instance().addMapLayer(layer, False)
        root.insertLayer(-1, layer)
        tms = 'type=xyz&zmin=0&zmax=20&url=https://mt1.google.com/vt/lyrs%3Dy%26x%3D{x}%26y%3D{y}%26z%3D{z}'
        layer = QgsRasterLayer(tms, 'Google Hybrid', 'wms')
        QgsProject.instance().addMapLayer(layer, False)
        root.insertLayer(-1, layer)

        iface.mapCanvas().refreshAllLayers()
        project.write(url_projet)
        path = os.path.realpath(path)
        os.startfile(path)

        def charger_structure_projet_xml(project, file_path):
            tree_root = project.layerTreeRoot()

            def add_layer_to_group(group, layer_name):
                layers = project.mapLayersByName(layer_name)
                if layers:
                    layer_tree_layer = QgsLayerTreeLayer(layers[0])
                    # Vérifier si la couche n'est pas déjà présente dans le groupe
                    if layer_name not in added_layers:
                        layer = tree_root.findLayer(layers[0].id())
                        added_layers[layer_name] = group.insertChildNode(
                            0, layer_tree_layer)
                        tree_root.removeChildNode(layer)

            with open(file_path, 'r') as file:
                lines = file.readlines()

            current_group = None
            added_layers = {}
            for line in lines:
                if line.strip() == '<layer_groups>':
                    continue
                elif line.strip() == '</layer_groups>':
                    break
                elif line.strip().startswith('<group name='):
                    group_name = line.split('"')[1]
                    current_group = QgsLayerTreeGroup()
                    current_group.setName(group_name)
                    tree_root.insertChildNode(0, current_group)
                elif line.strip().startswith('<layer name='):  # Modified 'id' to 'name'
                    layer_name = line.split('"')[1]
                    if current_group:
                        add_layer_to_group(current_group, layer_name)

        # Utilisation :
        project = QgsProject.instance()
        charger_structure_projet_xml(project, file_path)

        for layer in QgsProject.instance().mapLayers().values():
            if layer.type() == QgsMapLayer.VectorLayer:
                layer.loadNamedStyle(path+'/'+str(layer.name())[0:-13]+'.qml')
                layer.triggerRepaint()
                os.remove(path+'/'+str(layer.name())[0:-13]+'.qml')

        QMessageBox.information(
            None, "Exportation terminée", 'Projet exporté dans le dossier selectionné')

    def openHelp(self):
        pathhelp = os.path.join(os.path.dirname(__file__), 'aide.docx')
        os.system('start '+pathhelp)
